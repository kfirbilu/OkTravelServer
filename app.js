const dotenv = require('dotenv').config()
const express = require('express')
const app = express()
const bodyParser = require('body-parser')
const multer = require('multer')
const uuid = require('uuid').v4
const Video = require('./models/Video')
const Image = require('./models/Image')
const path = require('path')

 app.use(bodyParser.urlencoded({extended:true, limit:'1mb'}))
 app.use(bodyParser.json())

const mongoose = require('mongoose')
mongoose.connect(process.env.DATABASE_URL, {useNewUrlParser: true})
const db = mongoose.connection
db.on('error', error=>{console.error(error)})
db.once('open', ()=>{console.log('db connected')})

const port = process.env.PORT

const indexRouter = require('./routes/index')
app.use('/', indexRouter)


const postRouter = require('./routes/post_routes')
app.use('/post', postRouter)

const userRouter = require('./routes/user_routes')
app.use('/user', userRouter)

const locationRouter = require('./routes/location_routes')
app.use('/location', locationRouter)

const followerRouter = require('./routes/follower_routes')
app.use('/follower', followerRouter)

const authRouter = require('./routes/auth_routes')
app.use('/auth', authRouter)

//swagger api

if (process.env.NODE_ENV == "development") {
    const swaggerUI = require("swagger-ui-express");
    const swaggerJsDoc = require("swagger-jsdoc");
    const options = {
      definition: {
        openapi: "3.0.0",
        info: {
          title: "Ok Travel API",
          version: "1.0.0",
          description: "A simple Express Library API",
        },
        servers: [{ url: "http://localhost:" + port }],
      },
      apis: ["./routes/*.js"],
    };
    const specs = swaggerJsDoc(options);
    app.use("/api-docs", swaggerUI.serve, swaggerUI.setup(specs));
  }


  // swagger end


// file uploader - START


const storage = multer.diskStorage({
    destination:(req,file,cb)=>{
        cb(null,'uploads/')
    },

    filename:(req,file,cb)=>{
        const ext = path.extname(file.originalname)
        const id = uuid()
        const extname = ext.toString()   // file extension
        console.log(extname)


        if(extname == '.mp4' || extname=='.mkv'|| extname=='.flv'){  // filtering files - 
            console.log("video")
            const filePath = `videos/${id}${ext}`
            Video.create({filePath}).then(()=>{
            cb(null, filePath)  // saving the original file name and extension prefixed by uniqe ID generated by the UUID module
        })}

 
        if(extname == '.jpg' || extname=='.jpeg'|| extname=='.png'|| extname=='.jpe'){
            console.log("image")
            const filePath = `images/${id}${ext}`
            Image.create({filePath}).then(()=>{
            cb(null, filePath)  // saving the original file name and extension prefixed by uniqe ID generated by the UUID module
        })}
    }
})


const upload = multer({storage});

app.use(express.static('public')); // the folders that we use
app.use(express.static('uploads')) // the folders that we use

// upload file returns file path
app.post('/upload',upload.array('file'),(req,res)=>{  
    console.log("uploading files....")
    res.set('Content-Type', 'text/html');
    res.send(JSON.stringify(req.files[0].filename));
})

// get all videos
app.get('/videos',(req,res)=>{    
    Video.find().then((videos)=>{
        return res.json({
            status:'OK',
            videos
        })
    })
})

app.get('/videos/:id',(req,res)=>{
    console.log('Getting video...')
    try{
    var mongosss = require('mongodb');
    var id = req.params.id
    var o_id = new mongosss.ObjectID(id);
    Video.findOne({"_id": o_id}).then((video)=>{
        console.log("Sending video to client...")
        return res.json({
            filepath:video.filePath,
            status:'ok'})
        })
    }
    catch(err){
        res.status(400).send({
            'status': 'Failed to get video',
            'error': err.message
        })
    }

})



// get all images
app.get('/images',(req,res)=>{    
    Image.find().then((images)=>{
        return res.json({
            status:'OK',
            images
        })
    })
})

// file uploader - END

app.listen(port,'0.0.0.0', ()=>{
    console.log('server is running on port '+ port)
})